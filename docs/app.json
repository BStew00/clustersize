[{"name":"app.R","content":"\r\n\r\n\r\n\r\n# ESS Effective Sample Size eq. B2-1 for ESS p.129\r\nESS = function(p,d,alpha=0.05){\r\n  if(p<0|p>1)stop(\"p must be a number from 0 to 1\")\r\n  if(d<=0|d>=0.3)stop(\"d must be a number between 0 and 0.3\")\r\n  if(alpha<=0|alpha>=1)stop(\"alpha must be a number between 0 and 1\")\r\n  # Calculate k according to Table K on p.129\r\n  k=1\r\n  if(p<d|p>1-d)k=8*d*(1-2*d)\r\n  if(p>=d&p<0.3)k=4*(p+d)*(1-p-d)\r\n  if(p>0.7&p<=1-d)k=4*(p-d)*(1-p+d)\r\n  z=qnorm(1-alpha/2)\r\n  ceiling(k*z^2/4/d^2 + 1/d - 2*z^2 + (z+2)/k)\r\n}\r\n\r\nnOutTab = function(d,p,m,icc=1/6,cv=0.50,r,alpha=0.05){\r\n  val=expand.grid(p,d,alpha,m,icc,cv,r)\r\n  colnames(val) = c(\"p\",\"d\",\"alpha\",\"m\",\"icc\",\"cv\",\"r\")\r\n  val$ess=apply(val[,c(\"d\",\"p\")],1,function(x)ESS(x[2],x[1]))\r\n  val$deff=DE(val$m,icc=val$icc,cv=val$cv)\r\n  val$inf=INF(val$r)\r\n  val$n = ceiling(val$ess * val$deff * val$inf)\r\n  val$nc = ceiling(val$n / val$m)\r\n  colnames(val) = c(\r\n    \"p\",\"d\",\"alpha\",\"m\",\"icc\",\"cv\",\"r\",\r\n    \"ess(p,d,alpha)\",\"deff(m,icc,cv)\",\"inf(r)\",\"n(ess,deff,inf)\",\r\n    \"nc(n,m)\"\r\n  )\r\n  val\r\n}\r\n\r\n# DEFF Design Effect p.110 equation for DEFF\r\nDE = function(m,icc=1/6,cv=0.50){\r\n (1+(m-1)*icc)*(1+cv^2)\r\n}\r\n\r\n\r\n# Inflation factor due to non-response; p.112\r\n# Note: r %in% (0,1)\r\nINF = function(r)1/(1-r)\r\n\r\n\r\n\r\n# A number, i.e. one or more digits [0-9] optionally immediatelly followed \r\n#   by a decimal point and one or more digits \r\n# OR\r\n# A decimal number without the leading zero\r\n# OR\r\n# A fraction, i.e. a number immediately followed by a slash \r\n#   immediately followed by a number\r\n# Note: currently does not allow numerator or denominator of fraction to be a decimal number unless it has a leading zero\r\nnumeric_input_is_valid = function(x){\r\n  grepl(\"^\\\\d+(\\\\.\\\\d+)?$\", x) | \r\n  grepl(\"^\\\\.\\\\d+$\", x) | \r\n  grepl(\"^\\\\d+(\\\\.\\\\d+)?/\\\\d+(\\\\.\\\\d+)?$\", x)\r\n}\r\n\r\n# Take the string input, convert to numeric. Handles fractions.\r\nconvert_numeric_input = function(x,nm){\r\n  x = trimws(strsplit(x,\",\")[[1]])\r\n  input_is_ok = all(numeric_input_is_valid(x))\r\n  if(input_is_ok){\r\n    val = rep(0,length(x))\r\n    for(i in 1:length(x)){\r\n      if(grepl(\"/\",x[i])){\r\n        val[i] = as.numeric(eval(parse(text=x)))\r\n      } else {\r\n        val[i] = as.numeric(x[i])\r\n      }\r\n    }\r\n    val\r\n  } else {\r\n    stop(\"Please enter only numbers and/or valid fractions separated by commas, e.g., 1/2, 3.5/4, 0.05, 200\")\r\n  }\r\n}\r\n\r\n# Provide feedback on improper inputs\r\nobserve_inputs = function(x,nm){\r\n  x = trimws(strsplit(x,\",\")[[1]])\r\n  input_is_ok = all(numeric_input_is_valid(x))\r\n  shinyFeedback::feedbackDanger(nm, !input_is_ok, \"invalid input, see error message\")\r\n}\r\n\r\n# Makes table of sample sizes for Estimation studies\r\nmake_Est_SS_Tab = function(input){\r\n    i_nm = c(\"d\",\"p\",\"m\",\"icc\",\"cv\",\"r\",\"alpha\")\r\n\ti = reactiveValues()\r\n\tfor(k in i_nm)i[[k]]=convert_numeric_input(input[[k]],k)\r\n    nOutTab(i$d,i$p,i$m,i$icc,i$cv,i$r,i$alpha)\r\n}\r\n\r\n\r\n\r\nui <- function(request){fluidPage(\r\n   \r\n  shinyFeedback::useShinyFeedback(),\r\n\r\n  titlePanel(\"Cluster Survey Sample Size\"),\r\n\r\n  sidebarLayout(\r\n\r\n    sidebarPanel(\r\n\r\n\t  selectInput(inputId = \"study_type\",\r\n                  label = \"Choose a Study Type:\",\r\n                  choices = c(\"Estimation\", \"Classification\", \"Comparison\")),\r\n\r\n\t  # Estimation\r\n      conditionalPanel(\r\n        condition = \"input.study_type == 'Estimation'\",\r\n        helpText(\"Enter comma-separated values, then click 'Update View'\"),\r\n\t\tselectInput(inputId = \"estimation_n_or_d\",label=\"Solve for:\",choices=c(\"Sample size\",\"Half-width CI\")),\r\n\t\tconditionalPanel(\r\n\t\t  condition = \"input.estimation_n_or_d == 'Sample size'\",\r\n          actionButton(\"Btn_Est_SS\",\"Update View\", icon(\"refresh\")),\r\n          textInput('d', 'Desired half-width CI', \"0.05, 0.10\")\r\n\t\t ),\r\n\t\tconditionalPanel(\r\n\t\t  condition = \"input.estimation_n_or_d == 'Half-width CI'\",\r\n          actionButton(\"Btn_Est_CI\",\"Update View\", icon(\"refresh\")),\r\n          textInput('n', 'Sample size', \"300, 900\"),\r\n\t\t ),\r\n        textInput('p', 'Expected coverage proportion', \"0.10, 0.25\"),\r\n        textInput('m', 'Target number of respondents per cluster', \"5, 15\"),\r\n        textInput('icc', 'intracluster correlation coefficient', \"1/22, 1/6\"),\r\n        textInput('cv', 'Coefficient of variation of sample weights', \"0.50\"),\r\n        textInput('r', 'Anticipated non-response rate, from 0 to 1', \"0.15\"),\r\n        textInput('alpha', 'Type I error rate; usually 0.05 for 95% CI', \"0.05\")\r\n\r\n      ),\r\n\t  \r\n\t  # Classification\r\n      conditionalPanel(\r\n        condition = \"input.study_type == 'Classification'\",\r\n        numericInput(\"num\", \"Enter a number:\", value = 1)\r\n      ),\r\n\t  \r\n\t  # Comparison\r\n      conditionalPanel(\r\n        condition = \"input.study_type == 'Comparison'\",\r\n        textInput(\"text\", \"Enter text:\")\r\n      ),\r\n\t  \r\n    ),\r\n\r\n    # Main panel\r\n    mainPanel(\r\n      fluidRow(downloadButton(\"ESSdfDownload\",\"Download\"), bookmarkButton()),\r\n      fluidRow(tableOutput(\"ESSdf\"))\r\n    )\r\n\t\r\n\t\r\n  )\r\n)}\r\n\r\n\r\n\r\n\r\n\r\n\r\nserver <- function(input, output, session) {\r\n\r\n  observeEvent(input$Btn_Est_SS,{observe_inputs(input$d,\"d\")})\r\n  observeEvent(input$Btn_Est_SS,{observe_inputs(input$p,\"p\")})\r\n  observeEvent(input$Btn_Est_SS,{observe_inputs(input$m,\"m\")})\r\n  observeEvent(input$Btn_Est_SS,{observe_inputs(input$icc,\"icc\")})\r\n  observeEvent(input$Btn_Est_SS,{observe_inputs(input$cv,\"cv\")})\r\n  observeEvent(input$Btn_Est_SS,{observe_inputs(input$r,\"r\")})\r\n  observeEvent(input$Btn_Est_SS,{observe_inputs(input$alpha,\"alpha\")})\r\n\r\n  # Update table on button click\r\n  updated_data = eventReactive(input$Btn_Est_SS, {\r\n    make_Est_SS_Tab(input)\r\n  })\r\n  output$ESSdf = renderTable({\r\n    updated_data()\r\n  }, striped=TRUE\r\n  )\r\n  \r\n  # Download\r\n  EstSSOutTab = reactive({make_Est_SS_Tab(input)})\r\n\t\r\n  output$ESSdfDownload = downloadHandler(\r\n    filename = \"sample_size.csv\",\r\n    content = function(file){write.csv(EstSSOutTab(),file,row.names=FALSE)}\r\n  )\r\n\r\n\r\n  # Bookmark\r\n  # https://mastering-shiny.org/action-bookmark.html#updating-the-url\r\n  # Doesn't appear to work when run local; check when deployed\r\n  observe({\r\n    reactiveValuesToList(input)\r\n    session$doBookmark()\r\n  })\r\n  onBookmarked(updateQueryString)\r\n  \r\n  \r\n}\r\n\r\nshinyApp(ui = ui, server = server, enableBookmarking = \"url\")\r\n\r\n","type":"text"},{"name":"__Not_Include__.txt","content":"https://medium.com/@rami.krispin/deploy-shiny-app-on-github-pages-b4cbd433bdc","type":"text"},{"name":"run.R","content":"\r\nsetwd(\"C:/Users/JNN6/OneDrive - CDC/+My_Large_Workspace/Projects/Shiny_Learning/Shinylive_01\")\r\n\r\nlibrary(shiny)\r\n\r\nrunApp()\r\n\r\nshinylive::export(appdir = getwd(), destdir = \"docs\")\r\n","type":"text"}]
